version: '3.8'

services:
  registry:
    image: registry:2
    ports:
      - target: 5000
        published: 5000
        protocol: tcp
        mode: ingress
    networks:
      - communication-net
    volumes:
      - registry-data:/var/lib/registry
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
  
  # ========== KAFKA & ZOOKEEPER ==========
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    ports:
      - target: 2181
        published: 2181
        protocol: tcp
        mode: ingress
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      communication-net:
        aliases:
          - zookeeper
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: ingress
      - target: 9093
        published: 9093
        protocol: tcp
        mode: ingress
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      communication-net:
        aliases:
          - kafka
    depends_on:
      - zookeeper
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 3
        window: 120s
  
  # ========== RABBITMQ ==========
  
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - target: 5672
        published: 5672
        protocol: tcp
        mode: ingress
      - target: 15672
        published: 15672
        protocol: tcp
        mode: ingress
    environment:
      - RABBITMQ_DEFAULT_USER=exporter
      - RABBITMQ_DEFAULT_PASS=mypassword
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      communication-net:
        aliases:
          - rabbitmq
          - communication-tech_rabbitmq
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 20s
        max_attempts: 3
        window: 120s

  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:latest
    ports:
      - target: 9419
        published: 9419
        protocol: tcp
        mode: ingress
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=exporter
      - RABBIT_PASSWORD=mypassword
      - PUBLISH_PORT=9419
      - OUTPUT_FORMAT=TEXT
      - RABBIT_CAPABILITIES=bert,no_sort
    networks:
      communication-net:
        aliases:
          - rabbitmq-exporter
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 3
        window: 120s

  # ========== REDIS ==========

  redis:
    image: redis:latest
    ports:
      - target: 6379
        published: 6379
        protocol: tcp
        mode: ingress
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      communication-net:
        aliases:
          - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  redis-exporter:
    image: oliver006/redis_exporter:latest
    ports:
      - target: 9121
        published: 9121
        protocol: tcp
        mode: ingress
    command:
      - '--redis.addr=communication-tech_redis:6379'
      - '--include-system-metrics'
    networks:
      communication-net:
        aliases:
          - redis-exporter
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s

  # ========== CONSUMER ==========

  consumer:
    image: localhost:5000/consumer:latest
    ports:
      - target: 8080
        published: 8080
        protocol: tcp
        mode: ingress
    environment:
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=exporter
      - RabbitMQ__Password=mypassword
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__QueueName=message_queue
      - RabbitMQ__ExchangeName=messages-exchange
      - RabbitMQ__RoutingKey=messages.routing
      - RabbitMQ__IsEnabled=false
      - Redis__ConnectionString=redis:6379,abortConnect=false,connectTimeout=30000,syncTimeout=30000
      - Redis__IsEnabled=true
      - Kafka__IsEnabled=true
    networks:
      - communication-net
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 15s
        max_attempts: 5
        window: 120s

  # ========== SERVER ==========

  server:
    image: localhost:5000/server:latest
    ports:
      - target: 6061
        published: 6061
        protocol: tcp
        mode: ingress
      - target: 6013
        published: 6062
        protocol: tcp
        mode: ingress
      - target: 5276
        published: 5277
        protocol: tcp
        mode: ingress
    networks:
      - communication-net
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  # ========== GATEWAY ==========

  gateway:
    image: localhost:5000/gateway:latest
    environment:
      - Prometheus__Url=http://prometheus:9090
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=exporter
      - RabbitMQ__Password=mypassword
      - RabbitMQ__VirtualHost=/
      - RabbitMQ__QueueName=message_queue
      - RabbitMQ__ExchangeName=messages-exchange
      - RabbitMQ__RoutingKey=messages.routing
      - RabbitMQ__IsEnabled=false
      - Redis__ConnectionString=redis:6379,abortConnect=false
      - Redis__IsEnabled=true
      - Kafka__IsEnabled=true
    ports:
      - target: 6060
        published: 6060
        protocol: tcp
        mode: ingress
    volumes:
      # Host path -> Container path
      - type: bind
        source: /home/ubuntu/Communication.Tech/results
        target: /app/results
    networks:
      - communication-net
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s

  # ========== PROMETHEUS ==========

  prometheus:
    image: prom/prometheus:latest
    ports:
      - target: 9090
        published: 9090
        protocol: tcp
        mode: ingress
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    networks:
      - communication-net
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    deploy:
      mode: global
    ports:
      - "9100:9100"
    networks:
      - communication-net
    volumes:
      - type: bind
        source: /proc
        target: /host/proc
        read_only: true
      - type: bind
        source: /sys
        target: /host/sys
        read_only: true
      - type: bind
        source: /
        target: /rootfs
        read_only: true
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|etc)($$/)'

networks:
  communication-net:
    driver: overlay
    attachable: true
    
volumes:
  registry-data:
    driver: local

configs:
  prometheus_config:
    file: ./prometheus.yml